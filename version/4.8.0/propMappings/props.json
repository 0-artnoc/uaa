
{"analytics":{"code":{"*value":"<login.analytics.code>","*sources":{"login.analytics.code":"Google analytics code. If Google Analytics is desired set both login.analytics.code and login.analytics.domain"}},"domain":{"*value":"<login.analytics.domain>","*sources":{"login.analytics.domain":"Google analytics domain. If Google Analytics is desired set both login.analytics.code and login.analytics.domain"}}},"assetBaseUrl":{"*value":"<login.asset_base_url>","*sources":{"login.asset_base_url":"Deprecated in favor of branding properties. Base url for static assets, allows custom styling of the login server.  Use '/resources/pivotal' for Pivotal style."}},"authentication":{"policy":{"countFailuresWithinSeconds":{"*value":"<uaa.authentication.policy.countFailuresWithinSeconds>","*sources":{"uaa.authentication.policy.countFailuresWithinSeconds":"Number of seconds in which lockoutAfterFailures failures must occur in order for account to be locked"}},"global":{"countFailuresWithinSeconds":{"*value":"<uaa.authentication.policy.global.countFailuresWithinSeconds>","*sources":{"uaa.authentication.policy.global.countFailuresWithinSeconds":"Number of seconds in which lockoutAfterFailures failures must occur in order for account to be locked"}},"lockoutAfterFailures":{"*value":"<uaa.authentication.policy.global.lockoutAfterFailures>","*sources":{"uaa.authentication.policy.global.lockoutAfterFailures":"Number of allowed failures before account is locked"}},"lockoutPeriodSeconds":{"*value":"<uaa.authentication.policy.global.lockoutPeriodSeconds>","*sources":{"uaa.authentication.policy.global.lockoutPeriodSeconds":"Number of seconds to lock out an account when lockoutAfterFailures failures is exceeded"}}},"lockoutAfterFailures":{"*value":"<uaa.authentication.policy.lockoutAfterFailures>","*sources":{"uaa.authentication.policy.lockoutAfterFailures":"Number of allowed failures before account is locked"}},"lockoutPeriodSeconds":{"*value":"<uaa.authentication.policy.lockoutPeriodSeconds>","*sources":{"uaa.authentication.policy.lockoutPeriodSeconds":"Number of seconds to lock out an account when lockoutAfterFailures failures is exceeded"}}}},"database":{"abandonedtimeout":{"*value":"<uaa.database.abandoned_timeout>","*sources":{"uaa.database.abandoned_timeout":"Timeout in seconds for the longest running queries. Take into DB migrations for this timeout as they may run during a long period of time."}},"caseinsensitive":{"*value":"<uaa.database.case_insensitive>","*sources":{"uaa.database.case_insensitive":"Set to true if you don't want to be using LOWER() SQL functions in search queries/filters, because you know that your DB is case insensitive. If this property is null, then it will be set to true if the UAA DB is MySQL and false otherwise, but even on MySQL you can override it by setting it explicitly to false"}},"logabandoned":{"*value":"<uaa.database.log_abandoned>","*sources":{"uaa.database.log_abandoned":"Should connections that are forcibly closed be logged."}},"maxactive":{"*value":"<uaa.database.max_connections>","*sources":{"uaa.database.max_connections":"The max number of open connections to the DB from a running UAA instance"}},"maxidle":{"*value":"<uaa.database.max_idle_connections>","*sources":{"uaa.database.max_idle_connections":"The max number of open idle connections to the DB from a running UAA instance"}},"minidle":{"*value":"<uaa.database.min_idle_connections>","*sources":{"uaa.database.min_idle_connections":"The min number of open idle connections to the DB from a running UAA instance"}},"password":{"*value":"<uaadb.roles[tag=admin].password>","*sources":{"uaadb.roles":"The list of database Roles used in UAA database including tag/name/password\nThe UAA will always look for the tag `admin` and use the\n`name` and `password` properties as the database credentials\n"}},"removeabandoned":{"*value":"<uaa.database.remove_abandoned>","*sources":{"uaa.database.remove_abandoned":"True if connections that are left open longer then abandoned_timeout seconds during a session(time between borrow and return from pool) should be forcibly closed"}},"url":{"*value":"jdbc:<uaadb.db_scheme>://<uaadb.address>:<uaadb.port>/<uaadb.databases[tag=uaa].name>","*sources":{"uaadb.db_scheme":"Database scheme for UAA DB","uaadb.address":"The UAA database IP address. If this property is not set, the UAA will look for a `database` link\nand use the first instance address it can find in the list\n","uaadb.port":"The UAA database Port","uaadb.databases":"The list of databases used in UAA database including tag/name. The UAA will always look for the `uaa` tag\nand use the database name from that tag\n"}},"username":{"*value":"<uaadb.roles[tag=admin].name>","*sources":{"uaadb.roles":"The list of database Roles used in UAA database including tag/name/password\nThe UAA will always look for the tag `admin` and use the\n`name` and `password` properties as the database credentials\n"}}},"delete":{"*value":"<uaa.delete>","*sources":{"uaa.delete":"Contains a map of actions, each with a list of IDs. Possible delete actions are 'users' and 'clients'.\nThese will be deleted in the database (default zone).\nUnrecognized map keys will be ignored\n"}},"disableInternalAuth":{"*value":"<uaa.disableInternalAuth>","*sources":{"uaa.disableInternalAuth":"Disables internal user authentication"}},"disableInternalUserManagement":{"*value":"<uaa.disableInternalUserManagement>","*sources":{"uaa.disableInternalUserManagement":"Disables UI and API for internal user management"}},"issuer":{"uri":{"*value":"<uaa.issuer>","*sources":{"uaa.issuer":"The url to use as the issuer URI"}}},"jwt":{"token":{"claims":{"exclude":{"*value":"<uaa.jwt.claims.exclude>","*sources":{"uaa.jwt.claims.exclude":"List of claims to exclude from the JWT-based OAuth2 tokens."}}},"policy":{"accessTokenValiditySeconds":{"*value":"<uaa.jwt.policy.accessTokenValiditySeconds>","*sources":{"uaa.jwt.policy.accessTokenValiditySeconds":"The access token validity for the default zone if nothing is configured on the client. Will override global validity policies for the default zone only."}},"activeKeyId":{"*value":"<uaa.jwt.policy.active_key_id>","*sources":{"uaa.jwt.policy.active_key_id":"The ID of the JWT signing key to be used when signing tokens."}},"global":{"accessTokenValiditySeconds":{"*value":"<uaa.jwt.policy.global.accessTokenValiditySeconds>","*sources":{"uaa.jwt.policy.global.accessTokenValiditySeconds":"The global access token validity for all zones if nothing is configured on the client"}},"refreshTokenValiditySeconds":{"*value":"<uaa.jwt.policy.global.refreshTokenValiditySeconds>","*sources":{"uaa.jwt.policy.global.refreshTokenValiditySeconds":"The global refresh token validity for all zones if nothing is configured on the client"}}},"keys":{"*value":"<uaa.jwt.policy.keys>","*sources":{"uaa.jwt.policy.keys":"Map of key IDs and signing keys, each defined with a property `signingKey`."}},"refreshTokenValiditySeconds":{"*value":"<uaa.jwt.policy.refreshTokenValiditySeconds>","*sources":{"uaa.jwt.policy.refreshTokenValiditySeconds":"The refresh token validity for the default zone if nothing is configured on the client. Will override global validity policies for the default zone only."}}},"queryString":{"enabled":{"*value":"<uaa.jwt.queryString.enabled>","*sources":{"uaa.jwt.queryString.enabled":"If set to true, the /oauth/token and /check_token endpoints accept GET and query string parameters"}}},"refresh":{"restrict_grant":{"*value":"<uaa.jwt.refresh.restrict_grant>","*sources":{"uaa.jwt.refresh.restrict_grant":"Disallows refresh-token grant for any client for which the user has not approved the `uaa.offline_token` scope"}},"unique":{"*value":"<uaa.jwt.refresh.unique>","*sources":{"uaa.jwt.refresh.unique":"Revokes existing refresh tokens for client-user combination when creating a new refresh token. Note: only applies if `uaa.jwt.revocable` is true."}}},"revocable":{"*value":"<uaa.jwt.revocable>","*sources":{"uaa.jwt.revocable":"Set to true if you wish that even JWT tokens become individually revocable and stored in the UAA token storage. This setting applies to the default zone only."}},"signing-key":{"*value":"<uaa.jwt.signing_key>","*sources":{"uaa.jwt.signing_key":"Deprecated. Use uaa.jwt.policy.keys. The key used to sign the JWT-based OAuth2 tokens."}},"verification-key":{"*value":"<uaa.jwt.verification_key>","*sources":{"uaa.jwt.verification_key":"Deprecated. The key used to verify JWT-based OAuth2 tokens. If you are specifying your signing key(s) under uaa.jwt.policy.keys, the verification key does not need to be specified."}}}},"ldap":{"addShadowUserOnLogin":{"*value":"<uaa.ldap.add_shadow_user_on_login>","*sources":{"uaa.ldap.add_shadow_user_on_login":"If set to false, only users pre-populated in the UAA user database will be allowed to authenticate via LDAP. If set to true, any user from LDAP will be allowed to authenticate and an internal user will be created if one does not yet exist."}},"attributeMappings":{"*value":"<uaa.ldap.attributeMappings>","*sources":{"uaa.ldap.attributeMappings":"Specifies how UAA user attributes map to LDAP attributes. given_name, family_name, and phone_number are UAA user attributes, while other attributes should be included using the prefix `user.attribute`"}},"base":{"mailAttributeName":{"*value":"<uaa.ldap.mailAttributeName>","*sources":{"uaa.ldap.mailAttributeName":"The name of the LDAP attribute that contains the users email address"}},"mailSubstitute":{"*value":"<uaa.ldap.mailSubstitute>","*sources":{"uaa.ldap.mailSubstitute":"Defines an email pattern containing a {0} to generate an email address for an LDAP user during authentication"}},"mailSubstituteOverridesLdap":{"*value":"<uaa.ldap.mailSubstituteOverridesLdap>","*sources":{"uaa.ldap.mailSubstituteOverridesLdap":"Set to true if you wish to override an LDAP user email address with a generated one"}},"password":{"*value":"<uaa.ldap.userPassword>","*sources":{"uaa.ldap.userPassword":"Used with search-and-bind and search-and-compare. Password for the LDAP ID that performs a search of the LDAP tree for user information."}},"referral":{"*value":"<uaa.ldap.referral>","*sources":{"uaa.ldap.referral":"Configures the UAA LDAP referral behavior. The following values are possible:\n- follow -> Referrals are followed\n- ignore -> Referrals are ignored and the partial result is returned\n- throw  -> An error is thrown and the authentication is aborted\nReference: http://docs.oracle.com/javase/jndi/tutorial/ldap/referral/jndi.html\n"}},"searchBase":{"*value":"<uaa.ldap.searchBase>","*sources":{"uaa.ldap.searchBase":"Used with search-and-bind and search-and-compare. Define a base where the search starts at."}},"searchFilter":{"*value":"<uaa.ldap.searchFilter>","*sources":{"uaa.ldap.searchFilter":"Used with search-and-bind and search-and-compare. Search filter used. Takes one parameter, user ID defined as {0}"}},"url":{"*value":"<uaa.ldap.url>","*sources":{"uaa.ldap.url":"The URL to the ldap server, must start with ldap:// or ldaps://. Allows multiple servers to be specified, space separated"}},"userDn":{"*value":"<uaa.ldap.userDN>","*sources":{"uaa.ldap.userDN":"Used with search-and-bind and search-and-compare. A valid LDAP ID that has read permissions to perform a search of the LDAP tree for user information. "}}},"emailDomain":{"*value":"<uaa.ldap.emailDomain>","*sources":{"uaa.ldap.emailDomain":"Sets the whitelist of emails domains that the LDAP identity provider handles"}},"externalGroupsWhitelist":{"*value":"<uaa.ldap.externalGroupsWhitelist>","*sources":{"uaa.ldap.externalGroupsWhitelist":"Whitelist of external groups from LDAP that get added as roles in the ID Token"}},"groups":{"file":{"*value":"ldap/ldap-<uaa.ldap.groups.profile_type>.xml","*sources":{"uaa.ldap.groups.profile_type":"What type of group integration should be used. Values are: 'no-groups', 'groups-as-scopes', 'groups-map-to-scopes'"}},"groupRoleAttribute":{"*value":"<uaa.ldap.groups.groupRoleAttribute>","*sources":{"uaa.ldap.groups.groupRoleAttribute":"Used with groups-as-scopes, defines the attribute that holds the scope name(s)."}},"groupSearchFilter":{"*value":"<uaa.ldap.groups.groupSearchFilter>","*sources":{"uaa.ldap.groups.groupSearchFilter":"Search query filter to find the groups a user belongs to, or for a nested search, groups that a group belongs to"}},"maxSearchDepth":{"*value":"<uaa.ldap.groups.maxSearchDepth>","*sources":{"uaa.ldap.groups.maxSearchDepth":"Set to number of levels a nested group search should go. Set to 1 to disable nested groups (default)"}},"searchBase":{"*value":"<uaa.ldap.groups.searchBase>","*sources":{"uaa.ldap.groups.searchBase":"Search start point for a user group membership search, and sequential nested searches.. You can set this value to 'memberOf' when using Active Directory and skip group search but use the calculated memberOf field on the user records. No nested search will be performed."}},"searchSubtree":{"*value":"<uaa.ldap.groups.searchSubtree>","*sources":{"uaa.ldap.groups.searchSubtree":"Boolean value, set to true to search below the search base"}}},"ldapdebug":{"*value":"Ldap configured through UAA"},"profile":{"file":{"*value":"ldap/ldap-<uaa.ldap.profile_type>.xml","*sources":{"uaa.ldap.profile_type":"The file to be used for configuring the LDAP authentication. Options are: 'simple-bind', 'search-and-bind', 'search-and-compare'"}}},"ssl":{"skipverification":{"*value":"<uaa.ldap.ssl.skipverification>","*sources":{"uaa.ldap.ssl.skipverification":"Set to true, and LDAPS connection will not validate the server certificate."}},"sslCertificate":{"*value":"<uaa.ldap.sslCertificate>","*sources":{"uaa.ldap.sslCertificate":"Used with ldaps:// URLs. The certificate, if self signed, to be trusted by this connection."}},"tls":{"*value":"<uaa.ldap.ssl.tls>","*sources":{"uaa.ldap.ssl.tls":"If using StartTLS, what mode to enable. Default is none, not enabled. Possible values are none, simple"}}},"storeCustomAttributes":{"*value":"<uaa.ldap.storeCustomAttributes>","*sources":{"uaa.ldap.storeCustomAttributes":"Stores custom attribute mappings from the attributeMappings configuration in the database so that they can be retrieved using the /userinfo endpoint"}}},"links":{"(key)":{"*value":"<login.links.(key)>","*sources":{"login.links":"A hash of home/passwd/signup URLS (see commented examples below)"}},"homeRedirect":{"*value":"<login.home_redirect>","*sources":{"login.home_redirect":"Deprecated. May 09, 2017. Please use login.links.homeRedirect"}}},"logging":{"config":{"*value":"/var/vcap/jobs/uaa/config/log4j.properties"}},"login":{"accountChooserEnabled":{"*value":"<login.idpDiscoveryEnabled>","*sources":{"login.idpDiscoveryEnabled":"IDP Discovery should be set to true if you have configured more than one identity provider for UAA. The discovery relies on email domain being set for each additional provider. This property will also enable a list of selectable accounts that have signed in via the browser."}},"authorize":{"url":{"*value":"<uaa.url>/oauth/authorize","*sources":{"uaa.url":"The base url of the UAA"}}},"branding":{"banner":{"logo":{"*value":"<login.branding.banner.logo>","*sources":{"login.branding.banner.logo":"This is a base64 encoded PNG image which will be used as the banner on the UAA discovery login page"}},"text":{"*value":"<login.branding.banner.text>","*sources":{"login.branding.banner.text":"This is text that will be used in the banner area on the UAA discovery login page if no banner logo is configured"}}},"companyName":{"*value":"<login.branding.company_name>","*sources":{"login.branding.company_name":"This name is used on the UAA Pages and in account management related communication in UAA"}},"footerLegalText":{"*value":"<login.branding.footer_legal_text>","*sources":{"login.branding.footer_legal_text":"This text appears on the footer of all UAA pages"}},"footerLinks":{"*value":"<login.branding.footer_links>","*sources":{"login.branding.footer_links":"These links appear on the footer of all UAA pages. You may choose to add multiple urls for things like Support, Terms of Service etc."}},"productLogo":{"*value":"<login.branding.product_logo>","*sources":{"login.branding.product_logo":"This is a base64 encoded PNG image which will be used as the logo on all UAA pages like Login, Sign Up etc."}},"squareLogo":{"*value":"<login.branding.square_logo>","*sources":{"login.branding.square_logo":"This is a base64 encoded PNG image which will be used as the favicon for the UAA pages"}}},"entityBaseURL":{"*value":"<login.protocol>://<login.saml.entity_base_url>","*sources":{"login.protocol":"Scheme to use for HTTP communication (http/https)","login.saml.entity_base_url":"The URL for which SAML identity providers will post assertions to.\nIf set it overrides the default.\nThis URL should NOT have the schema (http:// or https:// prefix in it) instead just the hostname.\nThe schema is derived by #{login.protocol} property.\nThe default value is #{uaa.url}.replaceFirst('uaa','login'), typically login.example.com\nThe UAA will display this link in the cf --sso call if there is a SAML provider enabled.\n"}},"entityID":{"*value":"<login.saml.entityid>","*sources":{"login.saml.entityid":"This is used as the SAML Service Provider Entity ID. Each zone has a unique entity ID. Zones other than\nthe default zone will derive their entity ID from this setting by prefexing it with the subdomain.\n"}},"idpDiscoveryEnabled":{"*value":"<login.idpDiscoveryEnabled>","*sources":{"login.idpDiscoveryEnabled":"IDP Discovery should be set to true if you have configured more than one identity provider for UAA. The discovery relies on email domain being set for each additional provider. This property will also enable a list of selectable accounts that have signed in via the browser."}},"mfa":{"providers":{"(mfaName)":{"(key)":{"*value":"<login.mfa.providers.(mfaName).(key)>","*sources":{"login.mfa.providers":"A list of providers and their configuration. Provider names must be alphanumeric. Currently only `google-authenticator` is supported with no additional attributes. Issuer is optional."}},"config":{"algorithm":{"*value":"<login.mfa.providers.(mfaName).config.algorithm>","*sources":{"login.mfa.providers":"A list of providers and their configuration. Provider names must be alphanumeric. Currently only `google-authenticator` is supported with no additional attributes. Issuer is optional."}},"digits":{"*value":"<login.mfa.providers.(mfaName).config.digits>","*sources":{"login.mfa.providers":"A list of providers and their configuration. Provider names must be alphanumeric. Currently only `google-authenticator` is supported with no additional attributes. Issuer is optional."}},"duration":{"*value":"<login.mfa.providers.(mfaName).config.duration>","*sources":{"login.mfa.providers":"A list of providers and their configuration. Provider names must be alphanumeric. Currently only `google-authenticator` is supported with no additional attributes. Issuer is optional."}},"issuer":{"*value":"<login.mfa.providers.(mfaName).config.issuer>","*sources":{"login.mfa.providers":"A list of providers and their configuration. Provider names must be alphanumeric. Currently only `google-authenticator` is supported with no additional attributes. Issuer is optional."}}}}}},"oauth":{"providers":{"*value":"<login.oauth.providers>","*sources":{"login.oauth.providers":"Contains a hash of OpenID Connect/Oauth Identity Providers, the key will be used as the origin key for that provider, followed by key/value pairs. Presence of the userInfoUrl will mark it as an OpenID provider instead of OAuth."}}},"prompt":{"password":{"text":{"*value":"<login.prompt.password.text>","*sources":{"login.prompt.password.text":"The text used to prompt for a password during login"}}},"username":{"text":{"*value":"<login.prompt.username.text>","*sources":{"login.prompt.username.text":"The text used to prompt for a username during login"}}}},"saml":{"activeKeyId":{"*value":"<login.saml.activeKeyId>","*sources":{"login.saml.activeKeyId":"The active key to be used for signing messages and the key to be used to encrypt messages.\nSee login.saml.keys\n"}},"disableInResponseToCheck":{"*value":"<login.saml.disableInResponseToCheck>","*sources":{"login.saml.disableInResponseToCheck":"Disable InResponseToField SAML validation on the default zone. For non default zone, this flag is part of the zone configuration.\nPlease see: https://docs.spring.io/spring-security-saml/docs/current/reference/html/chapter-troubleshooting.html\n"}},"keys":{"*value":"<login.saml.keys>","*sources":{"login.saml.keys":"A map of keys where each map key is the name of the key. The login.saml.activeKeyId must match\none of the keys in the map.\nTo rotate keys, simply add keys. To activate a key, add it as the login.saml.activeKeyId\n"}},"providers":{"(idpAlias)":{"(key)":{"*value":"<login.saml.providers.(idpAlias).(key)>","*sources":{"login.saml.providers":"Contains a hash of SAML Identity Providers, the key is the IDP Alias, followed by key/value pairs. To learn more about how to setup a saml identity provider go to https://simplesamlphp.org"}},"idpMetadata":{"*value":"<login.saml.providers.(idpAlias).idpMetadata>","*sources":{"login.saml.providers":"Contains a hash of SAML Identity Providers, the key is the IDP Alias, followed by key/value pairs. To learn more about how to setup a saml identity provider go to https://simplesamlphp.org"}}}},"signMetaData":{"*value":"<login.saml.signMetaData>","*sources":{"login.saml.signMetaData":"Global property to sign Local/SP metadata"}},"signRequest":{"*value":"<login.saml.signRequest>","*sources":{"login.saml.signRequest":"Global property to sign Local/SP requests"}},"signatureAlgorithm":{"*value":"<login.saml.signatureAlgorithm>","*sources":{"login.saml.signatureAlgorithm":"Signature hashing algorithm for SAML. Can be SHA1, SHA256, or SHA512."}},"socket":{"connectionManagerTimeout":{"*value":"<login.saml.socket.connectionManagerTimeout>","*sources":{"login.saml.socket.connectionManagerTimeout":"Timeout in milliseconds for connection pooling for SAML metadata HTTP requests"}},"soTimeout":{"*value":"<login.saml.socket.soTimeout>","*sources":{"login.saml.socket.soTimeout":"Read timeout in milliseconds for SAML metadata HTTP requests"}}},"wantAssertionSigned":{"*value":"<login.saml.wantAssertionSigned>","*sources":{"login.saml.wantAssertionSigned":"Global property to request that external IDPs sign their SAML assertion before sending them to the UAA"}}},"selfServiceLinksEnabled":{"*value":"<login.self_service_links_enabled>","*sources":{"login.self_service_links_enabled":"Enable self-service account creation and password resets links."}},"serviceProviderCertificate":{"*value":"<login.saml.serviceProviderCertificate>","*sources":{"login.saml.serviceProviderCertificate":"Deprecated. Use login.saml.keys. Service provider certificate."}},"serviceProviderKey":{"*value":"<login.saml.serviceProviderKey>","*sources":{"login.saml.serviceProviderKey":"Deprecated. Use login.saml.keys. Private key for the service provider certificate."}},"serviceProviderKeyPassword":{"*value":"<login.saml.serviceProviderKeyPassword>","*sources":{"login.saml.serviceProviderKeyPassword":"Deprecated. Use login.saml.keys. Passphrase for the service provider private key."}},"url":{"*value":"<login.url>","*sources":{"login.url":"Set if you have an external login server.\nThe UAA uses this link on by its email service to create links\nThe UAA uses this as a base domain for internal hostnames so that subdomain can be detected\nThis defaults to the uaa.url property, and if not set, to login.<domain>\n"}}},"logout":{"redirect":{"parameter":{"disable":{"*value":false,"*sources":{"login.logout.redirect.parameter.disable":"Deprecated as of v52/uaa-4.7.0. Value ignored. Value is always false. Will be removed in the future."}},"whitelist":{"*value":"<login.logout.redirect.parameter.whitelist>","*sources":{"login.logout.redirect.parameter.whitelist":"A list of URLs that are accepted and honored as values to the `/logout.do?redirect` parameter . If a redirect parameter value is not white listed, redirect will be to the default URL, /login or to the value of uaa.login.logout.redirect.url if set."}}},"url":{"*value":"<login.logout.redirect.url>","*sources":{"login.logout.redirect.url":"The Location of the redirect header following a logout of the the UAA (/login)."}}}},"name":{"*value":"uaa"},"notifications":{"url":{"*value":"<login.notifications.url>","*sources":{"login.notifications.url":"The url for the notifications service (configure to use Notifications Service instead of SMTP server)"}}},"oauth":{"client":{"secret":{"policy":{"expireSecretInMonths":{"*value":"<uaa.client.secret.policy.expireSecretInMonths>","*sources":{"uaa.client.secret.policy":"The client secret policy for clients in the default zone."}},"global":{"expireSecretInMonths":{"*value":"<uaa.client.secret.policy.global.expireSecretInMonths>","*sources":{"uaa.client.secret.policy.global":"The global client secret policy for clients in a zone. If the zone doesn't have a client secret policy, this one will be used."}},"maxLength":{"*value":"<uaa.client.secret.policy.global.maxLength>","*sources":{"uaa.client.secret.policy.global.maxLength":"Maximum number of characters required for secret to be considered valid (defaults to 255)."}},"minLength":{"*value":"<uaa.client.secret.policy.global.minLength>","*sources":{"uaa.client.secret.policy.global.minLength":"Minimum number of characters required for secret to be considered valid (defaults to 0)."}},"requireDigit":{"*value":"<uaa.client.secret.policy.global.requireDigit>","*sources":{"uaa.client.secret.policy.global.requireDigit":"Minimum number of digits required for secret to be considered valid (defaults to 0)."}},"requireLowerCaseCharacter":{"*value":"<uaa.client.secret.policy.global.requireLowerCaseCharacter>","*sources":{"uaa.client.secret.policy.global.requireLowerCaseCharacter":"Minimum number of lowercase characters required for secret to be considered valid (defaults to 0)."}},"requireSpecialCharacter":{"*value":"<uaa.client.secret.policy.global.requireSpecialCharacter>","*sources":{"uaa.client.secret.policy.global.requireSpecialCharacter":"Minimum number of special characters required for secret to be considered valid (defaults to 0)."}},"requireUpperCaseCharacter":{"*value":"<uaa.client.secret.policy.global.requireUpperCaseCharacter>","*sources":{"uaa.client.secret.policy.global.requireUpperCaseCharacter":"Minimum number of uppercase characters required for secret to be considered valid (defaults to 0)."}}},"maxLength":{"*value":"<uaa.client.secret.policy.maxLength>","*sources":{"uaa.client.secret.policy.maxLength":"Maximum number of characters required for secret to be considered valid (defaults to 255)."}},"minLength":{"*value":"<uaa.client.secret.policy.minLength>","*sources":{"uaa.client.secret.policy.minLength":"Minimum number of characters required for secret to be considered valid (defaults to 0)."}},"requireDigit":{"*value":"<uaa.client.secret.policy.requireDigit>","*sources":{"uaa.client.secret.policy.requireDigit":"Minimum number of digits required for secret to be considered valid (defaults to 0)."}},"requireLowerCaseCharacter":{"*value":"<uaa.client.secret.policy.requireLowerCaseCharacter>","*sources":{"uaa.client.secret.policy.requireLowerCaseCharacter":"Minimum number of lowercase characters required for secret to be considered valid (defaults to 0)."}},"requireSpecialCharacter":{"*value":"<uaa.client.secret.policy.requireSpecialCharacter>","*sources":{"uaa.client.secret.policy.requireSpecialCharacter":"Minimum number of special characters required for secret to be considered valid (defaults to 0)."}},"requireUpperCaseCharacter":{"*value":"<uaa.client.secret.policy.requireUpperCaseCharacter>","*sources":{"uaa.client.secret.policy.requireUpperCaseCharacter":"Minimum number of uppercase characters required for secret to be considered valid (defaults to 0)."}}}}},"clients":{"(id)":{"(key)":{"*value":"<uaa.clients.(id).(key)>","*sources":{"uaa.clients":"List of OAuth2 clients that the UAA will be bootstrapped with"}},"id":{"*value":"(id)"}}},"user":{"authorities":{"*value":"<uaa.user.authorities>","*sources":{"uaa.user.authorities":"Contains a list of the default authorities/scopes assigned to a user"}}}},"password":{"policy":{"expirePasswordInMonths":{"*value":"<uaa.password.policy.expirePasswordInMonths>","*sources":{"uaa.password.policy.expirePasswordInMonths":"Number of months after which current password expires"}},"global":{"expirePasswordInMonths":{"*value":"<uaa.password.policy.global.expirePasswordInMonths>","*sources":{"uaa.password.policy.global.expirePasswordInMonths":"Number of months after which current password expires"}},"maxLength":{"*value":"<uaa.password.policy.global.maxLength>","*sources":{"uaa.password.policy.global.maxLength":"Maximum number of characters required for password to be considered valid"}},"minLength":{"*value":"<uaa.password.policy.global.minLength>","*sources":{"uaa.password.policy.global.minLength":"Minimum number of characters required for password to be considered valid"}},"requireDigit":{"*value":"<uaa.password.policy.global.requireDigit>","*sources":{"uaa.password.policy.global.requireDigit":"Minimum number of digits required for password to be considered valid"}},"requireLowerCaseCharacter":{"*value":"<uaa.password.policy.global.requireLowerCaseCharacter>","*sources":{"uaa.password.policy.global.requireLowerCaseCharacter":"Minimum number of lowercase characters required for password to be considered valid"}},"requireSpecialCharacter":{"*value":"<uaa.password.policy.global.requireSpecialCharacter>","*sources":{"uaa.password.policy.global.requireSpecialCharacter":"Minimum number of special characters required for password to be considered valid"}},"requireUpperCaseCharacter":{"*value":"<uaa.password.policy.global.requireUpperCaseCharacter>","*sources":{"uaa.password.policy.global.requireUpperCaseCharacter":"Minimum number of uppercase characters required for password to be considered valid"}}},"maxLength":{"*value":"<uaa.password.policy.maxLength>","*sources":{"uaa.password.policy.maxLength":"Maximum number of characters required for password to be considered valid"}},"minLength":{"*value":"<uaa.password.policy.minLength>","*sources":{"uaa.password.policy.minLength":"Minimum number of characters required for password to be considered valid"}},"requireDigit":{"*value":"<uaa.password.policy.requireDigit>","*sources":{"uaa.password.policy.requireDigit":"Minimum number of digits required for password to be considered valid"}},"requireLowerCaseCharacter":{"*value":"<uaa.password.policy.requireLowerCaseCharacter>","*sources":{"uaa.password.policy.requireLowerCaseCharacter":"Minimum number of lowercase characters required for password to be considered valid"}},"requireSpecialCharacter":{"*value":"<uaa.password.policy.requireSpecialCharacter>","*sources":{"uaa.password.policy.requireSpecialCharacter":"Minimum number of special characters required for password to be considered valid"}},"requireUpperCaseCharacter":{"*value":"<uaa.password.policy.requireUpperCaseCharacter>","*sources":{"uaa.password.policy.requireUpperCaseCharacter":"Minimum number of uppercase characters required for password to be considered valid"}}}},"require_https":{"*value":"<uaa.require_https>","*sources":{"uaa.require_https":"Request came in on a secure connection. Expect the load balancer/proxy to set the proper headers (x-forwarded-for, x-forwarded-proto)"}},"scim":{"external_groups":{"*value":"<uaa.scim.external_groups>","*sources":{"uaa.scim.external_groups":"External group mappings. Either formatted as an OpenStruct.\nAs an OpenStruct, the mapping additionally specifies an origin to which the mapping is applied:\n  origin1:\n    external_group1:\n      - internal_group1\n      - internal_group2\n      - internal_group3\n    external_group2:\n      - internal_group2\n      - internal_group4\n  origin2:\n    external_group3:\n      - internal_group3\n      - internal_group4\n      - internal_group5\n"}},"groups":{"*value":"<uaa.scim.groups>","*sources":{"uaa.scim.groups":"Contains a hash of group names and their descriptions. These groups will be added to the UAA database for the default zone but not associated with any user.\nExample:\n  uaa:\n    scim:\n      groups:\n        my-test-group: 'My test group description'\n        another-group: 'Another group description'\n"}},"user":{"override":{"*value":"<uaa.scim.user.override>","*sources":{"uaa.scim.user.override":"If true override users defined in uaa.scim.users found in the database."}}},"userids_enabled":{"*value":"<uaa.scim.userids_enabled>","*sources":{"uaa.scim.userids_enabled":"Enables the endpoint `/ids/Users` that allows consumers to translate user ids to name"}},"users":{"*value":["<uaa.scim.users[].name>|<uaa.scim.users[].password>|<uaa.scim.users[].email>|<uaa.scim.users[].firstName>|<uaa.scim.users[].lastName>|<uaa.scim.users[].groups>|<uaa.scim.users[].origin>"],"*sources":{"uaa.scim.users":"A list of users to be bootstrapped with authorities.\nEach entry supports the following format:\n  Short OpenStruct:\n    - name: username\n      password: password\n      groups:\n        - group1\n        - group2\n  Long OpenStruct:\n    - name: username\n      password: password\n      groups:\n        - group1\n        - group2\n      firstName: first name\n      lastName: lastName\n      email: email\n      origin: origin-value - most commonly uaa\n"}}},"servlet":{"idle-timeout":{"*value":"<uaa.servlet.idle-timeout>","*sources":{"uaa.servlet.idle-timeout":"Optional configuration of the UAA session idle timeout.\n- default to 1800 seconds\n"}},"session-cookie":{"*value":"<uaa.servlet.session-cookie>","*sources":{"uaa.servlet.session-cookie":"Optional configuration of the UAA session cookie.\nDefaults are the following key value pairs:\n  secure: <(boolean)this value if set, otherwise require_https>\n  http-only: <(boolean) - default to true. set HttpOnly flag on cookie.\n  max-age: <(int) lifetime in seconds of cookie - default to 30 minutes)\n  name: <(String) name of cookie, default is JSESSIONID>\n  comment: <(String) optional comment in cookie>\n  path: <(String) path for cookie, default is />\n  domain: <(String) domain for cookie, default is incoming request domain>\n"}}},"smtp":{"*value":"<login.smtp>","*sources":{"login.smtp":"SMTP server configuration, for password reset emails etc."}},"spring_profiles":{"*value":"<uaadb.db_scheme>,ldap","*sources":{"uaadb.db_scheme":"Database scheme for UAA DB"}},"uaa":{"limitedFunctionality":{"statusFile":{"*value":"<uaa.limitedFunctionality.statusFile>","*sources":{"uaa.limitedFunctionality.statusFile":"The UAA checks for the presence of this file. If this file exists, the UAA will continue to function\nbut in limited mode. This means any authentication or token action will continue to work, but more\nAPI endpoints that change configuration will return 503 UNAVAILABLE.\nNormally, there is no need to change this value, unless you have other scripts that may rely on it\n"}},"whitelist":{"endpoints":{"*value":"<uaa.limitedFunctionality.whitelist.endpoints>","*sources":{"uaa.limitedFunctionality.whitelist.endpoints":"Set the whitelisted API for UAA in degraded mode. Methods and Endpoints are unioned with each other: i.e. all methods are permitted for a whitelisted endpoint, and all endpoints are permitted for a whitelisted method"}},"methods":{"*value":"<uaa.limitedFunctionality.whitelist.methods>","*sources":{"uaa.limitedFunctionality.whitelist.methods":"Set the whitelisted API for UAA in degraded mode. Methods and Endpoints are unioned with each other: i.e. all methods are permitted for a whitelisted endpoint, and all endpoints are permitted for a whitelisted method"}}}},"shutdown":{"sleep":{"*value":"<uaa.shutdown.sleep>","*sources":{"uaa.shutdown.sleep":"Used for draining connection during a graceful shutdown. When the UAA process receives a kill signal\nit will delay the shutdown for the configured number of milliseconds. During this period,\nthe /healthz endpoint will return 503/stopping while all other endpoints continue to function.\n"}}},"url":{"*value":"<uaa.url>","*sources":{"uaa.url":"The base url of the UAA"}}},"zones":{"internal":{"hostnames":{"*value":["login.<domain>","<uaa.zones.internal.hostnames[]>"],"*sources":{"uaa.zones.internal.hostnames":"A list of hostnames that are routed to the UAA, specifically the default zone in the UAA. The UAA will reject any Host headers that it doesn't recognize.\nBy default the UAA recognizes:\n  The hostname from the property uaa.url\n  The hostname from the property login.url\n  localhost (in order to accept health checks)\nAny hostnames added as a list are additive to the default hostnames allowed.\n"}}}}}
