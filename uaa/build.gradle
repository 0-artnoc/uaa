buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath group: 'org.gradle.api.plugins', name: 'gradle-cargo-plugin', version: '1.5'
  }
}

apply plugin: 'war'

description = 'UAA'
dependencies {
  compile project(':cloudfoundry-identity-common')
  compile project(':cloudfoundry-identity-scim')
  compile group: 'cglib', name: 'cglib', version:'2.2.2'
  runtime group: 'org.springframework.security', name: 'spring-security-config', version:'3.2.4.RELEASE'
  runtime group: 'org.springframework.security', name: 'spring-security-jwt', version:'1.0.1.RELEASE'
  runtime group: 'org.springframework.retry', name: 'spring-retry', version:'1.0.2.RELEASE'
  runtime group: 'org.aspectj', name: 'aspectjweaver', version:'1.6.9'
  runtime group: 'org.apache.tomcat', name: 'tomcat-jdbc', version:rootProject.ext.tomcatVersion
  runtime group: 'javax.servlet', name: 'jstl', version:'1.2'
  runtime group: 'eu.tekul', name: 'szxcvbn_2.8.2', version:'0.2'
  runtime(group: 'edu.vt.middleware', name: 'vt-password', version:'3.1.1') {
    exclude(module: 'bcprov-jdk15')
    exclude(module: 'commons-logging')
  }
  runtime group: 'postgresql', name: 'postgresql', version:rootProject.ext.postgresqlVersion
  testCompile project(':cloudfoundry-identity-common').configurations.testCompile.dependencies
  testCompile project(':cloudfoundry-identity-common').sourceSets.test.output
  testCompile group: 'com.jayway.jsonpath', name: 'json-path', version:'0.9.1'
  testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version:'0.9.1'
  testCompile(group: 'org.apache.directory.server', name: 'apacheds-all', version:'1.5.5') {
    exclude(module: 'slf4j-api')
  }
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
  providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version:'2.1'
}

apply plugin: 'cargo'

Task[] cargoDependencies = [assemble, project(":cloudfoundry-identity-samples:cloudfoundry-identity-app").assemble, project(":cloudfoundry-identity-samples:cloudfoundry-identity-api").assemble]
cargoStartLocal.dependsOn cargoDependencies
cargoRunLocal.dependsOn cargoDependencies

task flushCoverageData(type: Exec) {
  commandLine "curl", "-s", "-v", "-X", "POST", "http://localhost:8080/uaa/healthz/coverage/flush"

  finalizedBy cargoStopLocal
  onlyIf { runningWithCoverage() }
}

task prepareDatabase {
  dependsOn flywayClean
  finalizedBy cargoStartLocal
}

task integrationTest(type: Test) {
  dependsOn databaseType().equals('hsqldb') ? cargoStartLocal : prepareDatabase

  finalizedBy flushCoverageData

  filter {
    includeTestsMatching "org.cloudfoundry.identity.uaa.integration.*"
  }
}

task instrumentedWar(type: War, dependsOn: instrument) {
  destinationDir = file("$buildDir/instrumented_libs")
  classpath = war.classpath
                .minus(files('/classes')).plus(files('/instrumented_classes'))
                .collect {
                  Boolean instrumentable = it.name.startsWith("cloudfoundry-identity-common-") || it.name.startsWith("cloudfoundry-identity-scim-")
                  if (instrumentable) {
                    file(it.absolutePath.replaceFirst("libs", "instrumented_libs"))
                  } else {
                    it
                  }
                }
  onlyIf { runningWithCoverage() }
}

task run(dependsOn: cargoRunLocal)

instrumentedWar.dependsOn project(":cloudfoundry-identity-common").tasks.findByName('instrumentedJar')
instrumentedWar.dependsOn project(":cloudfoundry-identity-scim").tasks.findByName('instrumentedJar')
assemble.dependsOn instrumentedWar

configurations {
  coberturaJar
}

dependencies {
  coberturaJar("net.sourceforge.cobertura:cobertura:2.0.3") {
    exclude(group: "org.mortbay.jetty")
  }
}

cargo {
  containerId = 'tomcat7x'
  port = 8080

  deployable {
    file = file('../samples/api/build/libs/cloudfoundry-identity-api-' + version + '.war')
    context = 'api'
  }

  deployable {
    file = file('../samples/app/build/libs/cloudfoundry-identity-app-' + version + '.war')
    context = 'app'
  }

  local {
    installer {
      installUrl = 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz'
      downloadDir = file("$buildDir/download")
      extractDir = file("$buildDir/extract")
    }
  }
}

project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
  cargo {
    deployable {
      if (runningWithCoverage()) {
        file = file('build/instrumented_libs/cloudfoundry-identity-uaa-' + version + '.war')
      } else {
        file = file('build/libs/cloudfoundry-identity-uaa-' + version + '.war')
      }
      context = 'uaa'
    }
    
    local {
      if (runningWithCoverage()) {
        extraClasspath = files(configurations.coberturaJar.files)
      }
    }
  }
}
