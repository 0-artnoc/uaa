buildscript {
  repositories {
    jcenter()
    maven {
      url 'http://repo.spring.io/plugins-release'
    }
  }

  dependencies {
    classpath group: 'org.gradle.api.plugins', name: 'gradle-cargo-plugin', version: '1.5'
/*    classpath 'org.kuali.maven.wagons:maven-s3-wagon:1.2.1'*/
    classpath group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4'
/*    classpath "net.saliman:gradle-cobertura-plugin:2.2.2"*/
  }
}

apply plugin: 'war'

description = 'UAA'
dependencies {
  compile project(':cloudfoundry-identity-common')
  compile project(':cloudfoundry-identity-scim')
  compile group: 'org.springframework', name: 'spring-core', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-webmvc', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-tx', version:'4.0.3.RELEASE'
  compile group: 'cglib', name: 'cglib', version:'2.2.2'
  compile group: 'org.hibernate', name: 'hibernate-validator', version:'4.3.1.Final'
  compile group: 'org.hsqldb', name: 'hsqldb', version:'2.3.1'
  compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version:'1.1.7'
  runtime group: 'org.springframework.security', name: 'spring-security-config', version:'3.2.4.RELEASE'
  runtime group: 'org.springframework.security', name: 'spring-security-jwt', version:'1.0.1.RELEASE'
  runtime group: 'org.springframework.retry', name: 'spring-retry', version:'1.0.2.RELEASE'
  runtime group: 'org.aspectj', name: 'aspectjweaver', version:'1.6.9'
  runtime group: 'org.aspectj', name: 'aspectjrt', version:'1.6.9'
  runtime group: 'org.apache.tomcat', name: 'tomcat-jdbc', version:'7.0.32'
  runtime group: 'log4j', name: 'log4j', version:'1.2.14'
  runtime group: 'javax.servlet', name: 'jstl', version:'1.2'
  runtime group: 'eu.tekul', name: 'szxcvbn_2.8.2', version:'0.2'
  runtime(group: 'edu.vt.middleware', name: 'vt-password', version:'3.1.1') {
    exclude(module: 'bcprov-jdk15')
    exclude(module: 'commons-logging')
  }
  runtime group: 'postgresql', name: 'postgresql', version:'9.1-901.jdbc3'
  testCompile project(':cloudfoundry-identity-common').sourceSets.test.output
  testCompile group: 'org.springframework', name: 'spring-test', version:'4.0.3.RELEASE'
  testCompile group: 'junit', name: 'junit', version:'4.11'
  testCompile project(':cloudfoundry-identity-common')
  testCompile group: 'org.mockito', name: 'mockito-all', version:'1.8.5'
  testCompile group: 'com.jayway.jsonpath', name: 'json-path', version:'0.9.1'
  testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version:'0.9.1'
  testCompile(group: 'org.apache.directory.server', name: 'apacheds-all', version:'1.5.5') {
    exclude(module: 'slf4j-api')
  }
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
  providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version:'2.1'
}

apply plugin: 'cargo'
cargoStartLocal.dependsOn assemble
cargoRunLocal.dependsOn assemble
cargo {
  containerId = 'tomcat7x'
  port = 8080

  deployable {
    file = file('build/instrumented_libs/cloudfoundry-identity-uaa-' + version + '.war')
    context = 'uaa'
  }

  deployable {
    file = file('../samples/api/build/libs/cloudfoundry-identity-api-' + version + '.war')
    context = 'api'
  }

  deployable {
    file = file('../samples/app/build/libs/cloudfoundry-identity-app-' + version + '.war')
    context = 'app'
  }

  local {
    installer {
      installUrl = 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz'
      downloadDir = file("$buildDir/download")
      extractDir = file("$buildDir/extract")
    }
  }
}

task copyInstrumentationData(type: Copy) {
  dependsOn cargoStartLocal
  
  from "../common/build/cobertura/coberturaInput.ser"
  into System.properties['java.io.tmpdir'] + 'cargo/conf'
  rename 'coberturaInput.ser', 'cobertura.ser'
}

task flushCoverageData(type: Exec) {
  commandLine "curl", "-v", "-X", "POST", "http://localhost:8080/uaa/healthz/coverage/flush"
  
  finalizedBy cargoStopLocal
}

task integrationTest(type: Test) {
  dependsOn copyInstrumentationData
  finalizedBy flushCoverageData

  filter {
    includeTestsMatching "org.cloudfoundry.identity.uaa.integration.*"
  }
}

task instrumentedWar(type: War, dependsOn: instrument) {
  destinationDir = file("$buildDir/instrumented_libs")
  classpath = war.classpath
                .minus(files('/classes')).plus(files('/instrumented_classes'))
                .collect {
                  instrumentable = it.name.startsWith("cloudfoundry-identity-common-") || it.name.startsWith("cloudfoundry-identity-scim-")
                  if (instrumentable) {
                    file(it.absolutePath.replaceFirst("libs", "instrumented_libs"))
                  } else {
                    it
                  }
                }
}

/*apply plugin: 'maven-publish'

publishing {
  publications {
    webApp(MavenPublication) {
      from components.web
    }
  }

  repositories {
    maven {
      credentials {
        username "AKIAIEYGDWG4KUPRZUXA"
        password "AfClHnhAU+jDlofSWaWyvMaUsVfW/PUGY/3OV180"
      }
      url "s3://maven.springframework.org/snapshot"
    }
  }
}
*/

apply plugin: 'artifactory'

artifactory {
  contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    repository {
      repoKey = 'libs-snapshots-local'
      maven = true
    }
  }
}
