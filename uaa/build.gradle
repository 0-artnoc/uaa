apply plugin: 'war'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.moowork.node'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply from: file('build_properties.gradle')

configurations.all {
    exclude group: 'org.beanshell', module: 'bsh-core'
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

processResources {
    //maven replaces project.artifactId in the log4j.properties file
    //https://www.pivotaltracker.com/story/show/74344574
    from(new File('../common/src/main/resources/log4j.properties'))
    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}', 'cloudfoundry-identity-uaa') : line }
}


eclipse {
    wtp {
        component {
            contextPath = 'uaa'
        }
    }
}

repositories {
    maven { url 'https://repo.spring.io/libs-milestone' }
}

description = 'UAA'
dependencies {
    compile group: 'cglib', name: 'cglib', version: '3.2.5'
    compile libraries.springBootStarter
    compile libraries.springBootStarterWeb
    compile libraries.springBootStarterTomcat
    runtime libraries.springSecurityConfig
    runtime libraries.springRetry
    runtime libraries.aspectJWeaver
    runtime libraries.postgresql
    providedCompile libraries.tomcatEmbed

    testCompile(group: 'org.apache.directory.server', name: 'apacheds-core', version: '1.5.5') {
        exclude(module: 'bcprov-jdk15')
        exclude(module: 'slf4j-api')
        exclude(module: 'slf4j-log4j12')
    }
    testCompile(group: 'org.apache.directory.server', name: 'apacheds-protocol-ldap', version: '1.5.5') {
        exclude(module: 'bcprov-jdk15')
        exclude(module: 'slf4j-api')
        exclude(module: 'slf4j-log4j12')
    }
    testCompile libraries.junit
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.9.1'
    testCompile group: 'dumbster', name: 'dumbster', version: '1.6'
    testCompile libraries.zxing
    testCompile group: 'org.reflections', name: 'reflections', version: '0.9.10'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile libraries.springTest
    testCompile libraries.springSecurityTest
    testCompile libraries.mockito
    testCompile libraries.tomcatJdbc
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'

    // from server

    compile libraries.tomcatJdbc
    compile group: 'javax.mail', name: 'mail', version: '1.4.7'

    compile libraries.commonsLogging
    compile libraries.jsonPath
    compile libraries.zxing
    compile libraries.springBeans
    compile libraries.springContext
    compile libraries.springContextSupport
    compile libraries.springTx
    compile libraries.springJdbc
    compile libraries.springWeb
    compile libraries.springSecurityCore
    compile libraries.springSecurityJwt
    compile libraries.apacheHttpClient
    compile libraries.springSecurityWeb
    compile libraries.springSecuritySaml

    compile(libraries.springSecurityOauth) {
        exclude(module: 'commons-codec')
        exclude(module: 'jackson-mapper-asl')
        exclude(module: 'spring-security-web')
    }

    compile libraries.bouncyCastleProv
    compile libraries.bouncyCastlePkix

    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'

    compile libraries.aspectJRt

    compile libraries.thymeleafSpring5
    compile libraries.thymeleafDialect
    compile libraries.thymeleafExtrasSpringSecurity5
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.8'

    compile(group: 'com.unboundid.product.scim', name: 'scim-sdk', version: '1.8.22') {
        exclude(module: 'servlet-api')
        exclude(module: 'commons-logging')
        exclude(module: 'httpclient')
        exclude(module: 'wink-client-apache-httpclient')
    }

    compile group: 'org.hibernate', name: 'hibernate-validator', version: "6.0.17.Final"
    compile libraries.flywayCore
    compile libraries.mariaJdbcDriver
    compile group: 'org.hsqldb', name: 'hsqldb', version: "2.5.0"

    compile group: 'org.yaml', name: 'snakeyaml', version: '1.25'

    compile libraries.springSecurityLdap
    compile libraries.springLdapCore
    compile libraries.springLdapCoreTiger
    compile(libraries.apacheLdapApi) {
        exclude(module: 'slf4j-api')
    }

    compile group: 'org.passay', name: 'passay', version: '1.2.0'

    compile group: 'com.warrenstrange', name: 'googleauth', version: '1.2.0'

    compile libraries.slf4jImpl
    compile libraries.log4jCore

    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile group: 'org.apache.santuario', name: 'xmlsec', version: '2.1.4'

    testCompile libraries.mockitoJunit5

    testCompile libraries.postgresql

    testCompile libraries.tomcatElApi
    testCompile libraries.tomcatJasperEl

    testCompile libraries.jsonPathAssert

    // from model
    compile project(':cloudfoundry-identity-metrics-data')

    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

    compile libraries.springWebMvc
    compile libraries.springSecurityConfig

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
}

node {
    version = '8.16.0'
    npmVersion = '6.4.1'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

task jasmineTests {
    dependsOn(npm_install)
    dependsOn(npm_test)
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    exclude 'org/cloudfoundry/identity/uaa/integration/*.class'
    exclude '**/*IT.class'
    exclude '**/*Docs.class'
    systemProperty "mock.suite.test", "true"
    filter {
//        includeTestsMatching "org.cloudfoundry.identity.uaa.account.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.annotations.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.audit.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.authentication.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.authentication.external.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.cache.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.client.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.codestore.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.config.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.crypto.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.db.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.error.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.impl.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.invitations.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.logging.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.login.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.logout.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.message.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.metrics.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.mfa.*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.mock.token*TokenMvcMock*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.oauth.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.openid.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.provider.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.resources.*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.scim.endpoints.*Tests"
        includeTestsMatching "org.cloudfoundry.identity.uaa.security.*Test"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.test.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.user.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.util.*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.web.ExceptionReport*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.web.HeaderFilter*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.web.HttpHeaders*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.web.SessionIdle*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.web.UaaSessionCookie*"
        includeTestsMatching "org.cloudfoundry.identity.uaa.web.tomcat.UaaStartup*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.yml.*"
//        includeTestsMatching "org.cloudfoundry.identity.uaa.zone.*"
    }
}

task populateVersionfile {
    def versionfile = new File("$projectDir/slateCustomizations/source/versionfile")
    versionfile.createNewFile()
    assert versionfile.exists()
    versionfile.text = version.toString().substring(0, version.toString().lastIndexOf('.')) + ".0"
}
task customizeSlate(type: Copy) {
    dependsOn populateVersionfile
    from 'slate'
    from 'slateCustomizations'
    into 'build/slate'
}
task docsTestRestDocs(type: Test) {
    useJUnitPlatform()
    include '**/*Docs.class'
    systemProperty "docs.build.generated.snippets.dir", snippetsDir.getPath()
}

task(bundleInstall, type: Exec) {
    dependsOn 'customizeSlate'
    workingDir file('build/slate')
    executable 'bundle'
    args 'install'
}

task(deleteDefaultContent, type: Delete) {
    delete 'build/slate/source/index.html.md'
}


task(slate, type: Exec) {
    dependsOn 'customizeSlate', 'deleteDefaultContent', 'bundleInstall', 'docsTestRestDocs'
    workingDir file('build/slate')
    executable 'bundle'
    args 'exec', 'middleman', 'build', '--verbose', '--build-dir=../docs/version/' + version.toString().substring(0, version.toString().lastIndexOf('.')) + ".0"
}

task tomcatListenerJar(type: Jar) {
    archiveBaseName = 'tomcat-listener'
    from(sourceSets.main.output)
    include "org/cloudfoundry/identity/uaa/web/tomcat/UaaStartupFailureListener.*"
}

artifacts {
    archives tomcatListenerJar
}

generateDocs {
    dependsOn slate
}

integrationTest {
    filter {
        includeTestsMatching "org.cloudfoundry.identity.uaa.integration.*"
        includeTestsMatching "*IT"
    }
}

jar {
    exclude "org/cloudfoundry/identity/uaa/web/tomcat/UaaStartupFailureListener.*"
}

war {
    //workaround for maven <scope>optional</scope>
    rootSpec.exclude("**/spring-security-oauth-*.jar")
}

