buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'http://repo.spring.io/plugins-release'
    }
  }
  
  dependencies {
    classpath group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4'
    classpath group: 'net.saliman', name: 'gradle-cobertura-plugin', version: '2.2.2'
    classpath group: 'org.kt3k.gradle.plugin', name: 'coveralls-gradle-plugin', version: '0.4.1'
    classpath group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: '3.0'
  }
}

ext {
  springVersion = '4.0.3.RELEASE'
  springSecurityVersion = '3.2.4.RELEASE'
  springSecurityOAuthVersion = '1.0.5.RELEASE'
  springSecurityLdapVersion = '1.3.2.RELEASE'
  postgresqlVersion = '9.1-901.jdbc3'
}

allprojects  {
  apply plugin: 'maven'
  group = 'org.cloudfoundry.identity'
  version = '1.7.3-SNAPSHOT'
  
  apply plugin: 'cobertura'
  
  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource

  }
  artifacts.archives packageSources
  repositories {
    maven { url "http://maven.springframework.org/release" }
    maven { url "http://maven.springframework.org/milestone" }
    maven { url "http://maven.springframework.org/snapshot" }
    maven { url "http://objectstyle.org/maven2/" }
    maven { url "http://repo.springsource.org/ext-release-local" }
    maven { url "http://repo.maven.apache.org/maven2" }
  }
  
  apply plugin: 'artifactory'

  artifactory {
    contextUrl = "http://repo.spring.io"
    publish {
      contextUrl = "http://repo.spring.io"
      repository {
        repoKey = version.endsWith('-SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'
        username = project.hasProperty('artifactory_user') ? "${artifactory_user}" : ""
        password = project.hasProperty('artifactory_password') ? "${artifactory_password}" : ""
        maven = true
      }
    }
  }
  
  sourceSets {
    instrumented
  }

  task copyInstrumentedClasses(type: Copy, dependsOn: instrument) {
    from "${buildDir}/instrumented_classes"
    into sourceSets.instrumented.output.classesDir
    onlyIf { runningWithCoverage() }
  }

  task makeInstrumentedSourceSet(type: Copy, dependsOn: copyInstrumentedClasses) {
    from sourceSets.main.output.resourcesDir
    into sourceSets.instrumented.output.resourcesDir
    onlyIf { runningWithCoverage() }
  }

  task instrumentedJar(type: Jar, dependsOn: makeInstrumentedSourceSet) {
    from sourceSets.instrumented.output
    destinationDir = file("$buildDir/instrumented_libs")
    onlyIf { runningWithCoverage() }
  }

  apply plugin: 'flyway'

  flyway {
    switch (databaseType()) {
      case 'mysql':
        driver = 'org.mariadb.jdbc.Driver'
        url = 'jdbc:mysql://localhost:3306/uaa'
        user = 'root'
        password = 'changeme'
        schemas = ['uaa']
        break
      case 'postgresql':
        driver = 'org.postgresql.Driver'
        url = 'jdbc:postgresql:uaa'
        user = 'root'
        password = 'changeme'
        break
    }
  }
}

apply plugin: 'coveralls'

cobertura {
  coverageFormats = ['xml', 'html']
  coverageMergeDatafiles = [
    new File("common/build/cobertura/cobertura.ser"),
    new File("scim/build/cobertura/cobertura.ser"),
    new File("uaa/build/cobertura/cobertura.ser"),
    new File(System.properties['java.io.tmpdir'] + 'cargo/conf/cobertura.ser')
  ]
  coverageExcludes = ['.*org.cloudfoundry.identity.uaa.coverage.CoverageController']
}

test.dependsOn([
  ":cloudfoundry-identity-common:test",
  ":cloudfoundry-identity-scim:test",
  ":cloudfoundry-identity-uaa:test"
])

def runningWithCoverage() {
  project.tasks.findByName('instrument').enabled
}

def databaseType() {
  List activeProfiles = (System.getenv('TESTENV') ?: '').split(',')
  if (activeProfiles.contains('mysql')) {
    'mysql'
  } else if (activeProfiles.contains('postgresql')) {
    'postgresql'
  } else {
    'hsqldb'
  }
}