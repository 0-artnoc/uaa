buildscript {
  repositories {
    mavenCentral()
  }
  
  dependencies {
    classpath "net.saliman:gradle-cobertura-plugin:2.2.2"
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.4.1'
  }
}

allprojects  {
  apply plugin: 'maven'
  group = 'org.cloudfoundry.identity'
  version = '1.7.3-SNAPSHOT'
  
  apply plugin: 'cobertura'
  
  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource

  }
  artifacts.archives packageSources
  repositories {
    maven { url "http://maven.springframework.org/release" }
    maven { url "http://maven.springframework.org/milestone" }
    maven { url "http://maven.springframework.org/snapshot" }
    maven { url "http://objectstyle.org/maven2/" }
    maven { url "http://repo.springsource.org/ext-release-local" }
    maven { url "http://repo.maven.apache.org/maven2" }
  }
  
  sourceSets {
    instrumented
  }

  task copyInstrumentedClasses(type: Copy, dependsOn: instrument) {
    from "${buildDir}/instrumented_classes"
    into sourceSets.instrumented.output.classesDir
    onlyIf { runningWithCoverage() }
  }

  task makeInstrumentedSourceSet(type: Copy, dependsOn: copyInstrumentedClasses) {
    from sourceSets.main.output.resourcesDir
    into sourceSets.instrumented.output.resourcesDir
    onlyIf { runningWithCoverage() }
  }

  task instrumentedJar(type: Jar, dependsOn: makeInstrumentedSourceSet) {
    from sourceSets.instrumented.output
    destinationDir = file("$buildDir/instrumented_libs")
    onlyIf { runningWithCoverage() }
  }

  configurations.all {
  }
}

apply plugin: 'coveralls'

cobertura {
  coverageFormats = ['xml', 'html']
  coverageMergeDatafiles = [
    new File("common/build/cobertura/cobertura.ser"),
    new File("scim/build/cobertura/cobertura.ser"),
    new File("uaa/build/cobertura/cobertura.ser"),
    new File(System.properties['java.io.tmpdir'] + 'cargo/conf/cobertura.ser')
  ]
  coverageExcludes = ['.*org.cloudfoundry.identity.uaa.coverage.CoverageController']
}

test.dependsOn([
  ":cloudfoundry-identity-common:test",
  ":cloudfoundry-identity-scim:test",
  ":cloudfoundry-identity-uaa:test"
])

dependencies {
  compile project(':cloudfoundry-identity-common')
  compile project(':cloudfoundry-identity-scim')
  compile project(':cloudfoundry-identity-uaa')
  compile project(':cloudfoundry-identity-samples:cloudfoundry-identity-api')
  compile project(':cloudfoundry-identity-samples:cloudfoundry-identity-app')
}

def runningWithCoverage() {
  project.tasks.findByName('instrument').enabled
}